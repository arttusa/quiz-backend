{"version":3,"sources":["components.js","utils.js","app.js","index.js"],"names":["Container","styled","other","Grid","container","Item","item","StyledButton","a","StyledButtonDisabled","StyledPoints","div","StyledQuestion","span","StyledAnswer","StyledScore","Scoreboard","topTen","style","marginTop","xs","display","justifyContent","map","margin","border","name","score","toFixed","ShowScoreboard","scores","setName","setScore","setQuizState","setData","setScores","React","useState","scoreData","setScoreData","useEffect","axios","post","then","res","data","temp","console","log","fetchData","alignItems","height","paddingLeft","paddingRight","onClick","AnswerQuestions","questionsAnswered","setQuestionsAnswered","timeLeft","setTimeLeft","timer","setInterval","clearInterval","flexDirection","width","backgroundColor","borderRadius","marginLeft","paddingTop","paddingBottom","fontSize","path","length","question","answers","correct_answer","AskName","buttonDisabled","setQuestions","get","catch","error","fetchScoreData","temp2","marginBottom","TextField","value","onChange","e","target","App","quizState","questions","Fragment","minHeight","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.715c9013.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Grid, TextField } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport { path } from 'ramda';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { getQuestions, getTopTen } from './utils';\r\n\r\nconst Container = styled(({ ...other }) => <Grid container={true} {...other} />)``;\r\n\r\nconst Item = styled(({ ...other }) => <Grid item={true} {...other} />)``;\r\n\r\nexport const StyledButton = styled.a`\r\n\tcolor: #1f4f79;\r\n\tfont-size: 2.4rem;\r\n\t&:hover {\r\n\t\tcolor: white;\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\nexport const StyledButtonDisabled = styled.a`\r\n\tcolor: #9e9e9e;\r\n\tfont-size: 2.4rem;\r\n`;\r\n\r\nexport const StyledPoints = styled.div`\r\n\tcolor: #1f4f79;\r\n\tfont-size: 2.4rem;\r\n`;\r\n\r\nexport const StyledQuestion = styled.span`\r\n\tpadding-right: 3rem;\r\n\tpadding-left: 3rem;\r\n`;\r\n\r\nexport const StyledAnswer = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tmargin: 2vh;\r\n\t&:hover {\r\n\t\tcursor: pointer;\r\n\t\ttransform: scale(1.03);\r\n\t}\r\n\tbackground-color: #d1d1d1;\r\n\twidth: 20vw;\r\n\theight: 10vh;\r\n`;\r\n\r\nexport const StyledScore = styled.div`\r\n\tfont-size: 3rem;\r\n\tcolor: #1f4f79;\r\n`;\r\n\r\n/**\r\n * component for creating the scoreboard\r\n * @param topTen list of ten best players \r\n */\r\nconst Scoreboard = ({ topTen }) => {\r\n\treturn (\r\n\t\t<Container style={{ marginTop: '3rem' }}>\r\n\t\t\t<Item xs={12}>\r\n\t\t\t\t<Container style={{ display: 'flex', justifyContent: 'center' }}>\r\n\t\t\t\t\t<Item xs={4} style={{ display: 'flex', justifyContent: 'center' }}>\r\n\t\t\t\t\t\tName\r\n\t\t\t\t\t</Item>\r\n\t\t\t\t\t<Item xs={4} style={{ display: 'flex', justifyContent: 'center' }}>\r\n\t\t\t\t\t\tScore\r\n\t\t\t\t\t</Item>\r\n\t\t\t\t</Container>\r\n\t\t\t</Item>\r\n\t\t\t{topTen.map((item) => (\r\n\t\t\t\t<Item xs={12}>\r\n\t\t\t\t\t<Container style={{ display: 'flex', justifyContent: 'center' }}>\r\n\t\t\t\t\t\t<Item\r\n\t\t\t\t\t\t\txs={4}\r\n\t\t\t\t\t\t\tstyle={{ display: 'flex', justifyContent: 'center', margin: '0.2rem', border: '1px solid' }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{item.name || '-'}\r\n\t\t\t\t\t\t</Item>\r\n\t\t\t\t\t\t<Item\r\n\t\t\t\t\t\t\txs={4}\r\n\t\t\t\t\t\t\tstyle={{ display: 'flex', justifyContent: 'center', margin: '0.2rem', border: '1px solid' }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{item.score.toFixed(2) || '-'}\r\n\t\t\t\t\t\t</Item>\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</Item>\r\n\t\t\t))}\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\n/**\r\n * the scoreboard page is created here\r\n * @param scores top ten of scoreboard\r\n * @param name name that was asked in the beginning\r\n * @param setName function for setting name, in this case to empty string\r\n * @param score the score that the player achieved\r\n * @param setScore function for setting score, in this case to zero\r\n * @param setQuizState function for handling state of the quiz: in this case the state is switched to askName where name of the player is asked\r\n * @param setData function for handling questions: in this case an empty array is set as value of data\r\n * @param setScores function for handling scoreboard's top ten. In this case an empty array is set as the value of 'scores'\r\n */\r\nexport const ShowScoreboard = ({ scores, name, setName, score, setScore, setQuizState, setData, setScores }) => {\r\n\tconst [ scoreData, setScoreData ] = React.useState([]);\r\n\t// Get top 10 on scoreboard\r\n\tReact.useEffect(\r\n\t\t() => {\r\n\t\t\tsetScoreData(scores);\r\n\t\t\tconst fetchData = async () => {\r\n\t\t\t\tconst url = 'https://oop-harkka.herokuapp.com/api/addscore';\r\n\t\t\t\tconst temp = await axios.post(url, { name: name, score: score.toFixed(2) }).then((res) => {\r\n\t\t\t\t\treturn res.data;\r\n\t\t\t\t});\r\n\t\t\t\tconsole.log(temp);\r\n\t\t\t\tsetScoreData(temp);\r\n\t\t\t};\r\n\t\t\tfetchData();\r\n\t\t},\r\n\t\t[ name, score, scores ]\r\n\t);\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Item\r\n\t\t\t\txs={12}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\theight: '5vh',\r\n\t\t\t\t\tmarginTop: '5vh',\r\n\t\t\t\t\tpaddingLeft: '10rem',\r\n\t\t\t\t\tpaddingRight: '10rem'\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<StyledScore>\r\n\t\t\t\t\t{`${name}, your score is ${score.toFixed(2)}!`}\r\n\t\t\t\t\t{score > scores[9].score && ` You made it to top 10!`}\r\n\t\t\t\t</StyledScore>\r\n\t\t\t</Item>\r\n\t\t\t<Item xs={12}>\r\n\t\t\t\t<Container style={{ display: 'flex', justifyContent: 'center' }}>\r\n\t\t\t\t\t<Item xs={6}>\r\n\t\t\t\t\t\t<Scoreboard topTen={scoreData} />\r\n\t\t\t\t\t</Item>\r\n\t\t\t\t</Container>\r\n\t\t\t</Item>\r\n\t\t\t<Item\r\n\t\t\t\txs={12}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\theight: '10vh',\r\n\t\t\t\t\tmarginTop: '10vh'\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<StyledButton\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetName('');\r\n\t\t\t\t\t\tsetQuizState('askName');\r\n\t\t\t\t\t\tsetScore(0);\r\n\t\t\t\t\t\tsetData([]);\r\n\t\t\t\t\t\tsetScores([]);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tTry Again\r\n\t\t\t\t</StyledButton>\r\n\t\t\t</Item>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\n/**\r\n * \r\n * @param data list of questions\r\n * @param setQuizState function for handling quiz state, here the quiz state is set to 'showScoreboard' after 10 questions have been answered\r\n * @param questionsAnswered number of questions answered, values are from zero to ten\r\n * @param setQuestionsAnswered function for handling the number of questions that have been answered\r\n * @param score the score that the player achieved in the game\r\n * @param setScore function for handling score\r\n */\r\nexport const AnswerQuestions = ({ data, setQuizState, questionsAnswered, setQuestionsAnswered, score, setScore }) => {\r\n\tconst [ timeLeft, setTimeLeft ] = React.useState(20000);\r\n\t// When 10 questions are answered, switch to scoreboard\r\n\tReact.useEffect(\r\n\t\t() => {\r\n\t\t\tif (questionsAnswered === 10) {\r\n\t\t\t\tsetQuizState('showScoreboard');\r\n\t\t\t\tsetQuestionsAnswered(0);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ questionsAnswered, setQuestionsAnswered, setQuizState ]\r\n\t);\r\n\t// timer\r\n\tReact.useEffect(\r\n\t\t() => {\r\n\t\t\tif (timeLeft === 0) {\r\n\t\t\t\tsetQuestionsAnswered(questionsAnswered + 1);\r\n\t\t\t\t//getNextQuestion();\r\n\t\t\t\tsetTimeLeft(20000);\r\n\t\t\t}\r\n\t\t\tconst timer = timeLeft > 0 && setInterval(() => setTimeLeft(timeLeft - 10), 10);\r\n\t\t\treturn () => clearInterval(timer);\r\n\t\t},\r\n\t\t[ timeLeft, questionsAnswered, setQuestionsAnswered ]\r\n\t);\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Item xs={12} style={{ height: '5vh' }}>\r\n\t\t\t\t<Container style={{ height: '5vh' }}>\r\n\t\t\t\t\t<Item xs={10} style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: `${timeLeft / 20000 * 100}%`,\r\n\t\t\t\t\t\t\t\tbackgroundColor: '#1f4f79',\r\n\t\t\t\t\t\t\t\theight: '4vh',\r\n\t\t\t\t\t\t\t\tborder: '0.5rem',\r\n\t\t\t\t\t\t\t\tborderRadius: '0.5rem',\r\n\t\t\t\t\t\t\t\tmarginLeft: '0.5vh'\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Item>\r\n\t\t\t\t\t<Item xs={2} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n\t\t\t\t\t\t<StyledPoints>{score.toFixed(2)}</StyledPoints>\r\n\t\t\t\t\t</Item>\r\n\t\t\t\t</Container>\r\n\t\t\t</Item>\r\n\t\t\t<Item\r\n\t\t\t\txs={12}\r\n\t\t\t\tstyle={{ paddingTop: '5vh', paddingBottom: '5vh', display: 'flex', justifyContent: 'center' }}\r\n\t\t\t>\r\n\t\t\t\t<StyledQuestion\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tfontSize: `${path([ questionsAnswered, 'question' ], data) &&\r\n\t\t\t\t\t\tpath([ questionsAnswered, 'question' ], data).length > 60\r\n\t\t\t\t\t\t\t? '1.5rem'\r\n\t\t\t\t\t\t\t: path([ questionsAnswered, 'question' ], data) &&\r\n\t\t\t\t\t\t\t\tpath([ questionsAnswered, 'question' ], data).length > 40\r\n\t\t\t\t\t\t\t\t? '2rem'\r\n\t\t\t\t\t\t\t\t: path([ questionsAnswered, 'question' ], data) &&\r\n\t\t\t\t\t\t\t\t\tpath([ questionsAnswered, 'question' ], data).length > 30\r\n\t\t\t\t\t\t\t\t\t? '2.5rem'\r\n\t\t\t\t\t\t\t\t\t: '3rem'}`\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{path([ questionsAnswered, 'question' ], data) ? data[questionsAnswered].question : ''}\r\n\t\t\t\t</StyledQuestion>\r\n\t\t\t</Item>\r\n\t\t\t<Item xs={12}>\r\n\t\t\t\t<Container style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n\t\t\t\t\t<StyledAnswer\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tconsole.log(data);\r\n\t\t\t\t\t\t\tsetQuestionsAnswered(questionsAnswered + 1);\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t!!data[questionsAnswered].answers[0] &&\r\n\t\t\t\t\t\t\t\t!!data[questionsAnswered].correct_answer &&\r\n\t\t\t\t\t\t\t\tdata[questionsAnswered].answers[0] === data[questionsAnswered].correct_answer\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tsetScore(score + timeLeft / 200);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsetTimeLeft(20000);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{path([ questionsAnswered, 'answers', 0 ], data) ? data[questionsAnswered].answers[0] : ''}\r\n\t\t\t\t\t</StyledAnswer>\r\n\t\t\t\t\t<StyledAnswer\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetQuestionsAnswered(questionsAnswered + 1);\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t!!data[questionsAnswered].answers[1] &&\r\n\t\t\t\t\t\t\t\t!!data[questionsAnswered].correct_answer &&\r\n\t\t\t\t\t\t\t\tdata[questionsAnswered].answers[1] === data[questionsAnswered].correct_answer\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tsetScore(score + timeLeft / 200);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsetTimeLeft(20000);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{path([ questionsAnswered, 'answers', 1 ], data) ? data[questionsAnswered].answers[1] : ''}\r\n\t\t\t\t\t</StyledAnswer>\r\n\t\t\t\t</Container>\r\n\t\t\t\t<Container style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n\t\t\t\t\t<StyledAnswer\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetQuestionsAnswered(questionsAnswered + 1);\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t!!data[questionsAnswered].answers[2] &&\r\n\t\t\t\t\t\t\t\t!!data[questionsAnswered].correct_answer &&\r\n\t\t\t\t\t\t\t\tdata[questionsAnswered].answers[2] === data[questionsAnswered].correct_answer\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tsetScore(score + timeLeft / 200);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsetTimeLeft(20000);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{path([ questionsAnswered, 'answers', 2 ], data) ? data[questionsAnswered].answers[2] : ''}\r\n\t\t\t\t\t</StyledAnswer>\r\n\t\t\t\t\t<StyledAnswer\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetQuestionsAnswered(questionsAnswered + 1);\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t!!data[questionsAnswered].answers[3] &&\r\n\t\t\t\t\t\t\t\t!!data[questionsAnswered].correct_answer &&\r\n\t\t\t\t\t\t\t\tdata[questionsAnswered].answers[3] === data[questionsAnswered].correct_answer\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tsetScore(score + timeLeft / 200);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsetTimeLeft(20000);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{path([ questionsAnswered, 'answers', 3 ], data) ? data[questionsAnswered].answers[3] : ''}\r\n\t\t\t\t\t</StyledAnswer>\r\n\t\t\t\t</Container>\r\n\t\t\t</Item>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\n/**\r\n * Component for rendering page to ask name of player\r\n * @param name name of the player\r\n * @param setName function for handling the name of the player\r\n * @param setQuizState function for handling the state of the quiz, in this case the state is set to 'answerQuestions' after name has been submitted\r\n * @param buttonDisabled boolean for deciding whether to let player submit his/her name. Questions are loaded when in this window and not having loaded the questiong when submitting would lead to an error\r\n * @param setQuestions function for handling questions. when the questions have been loaded, they are set to variable named 'questions'\r\n * @param setScores function for handling the scoreboard. Scoreboard is downloaded when in this screen and scores and names are set to variable 'scores' as list\r\n */\r\nexport const AskName = ({ name, setName, setQuizState, buttonDisabled, setQuestions, setScores }) => {\r\n\tReact.useEffect(\r\n\t\t() => {\r\n\t\t\tconst fetchData = async () => {\r\n\t\t\t\tconst temp = await getQuestions();\r\n\t\t\t\tsetQuestions(temp);\r\n\t\t\t};\r\n\t\t\tconst fetchScoreData = async () => {\r\n\t\t\t\tconst temp2 = await getTopTen();\r\n\t\t\t\tsetScores(temp2);\r\n\t\t\t};\r\n\t\t\tfetchData();\r\n\t\t\tfetchScoreData();\r\n\t\t},\r\n\t\t[ setQuestions, setScores ]\r\n\t);\r\n\treturn (\r\n\t\t<Container style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\r\n\t\t\t<Item xs={4} style={{}}>\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Item xs={12} style={{ display: 'flex', justifyContent: 'left', marginBottom: '0.4rem' }}>\r\n\t\t\t\t\t\t<TextField value={name} onChange={(e) => setName(e.target.value)} />\r\n\t\t\t\t\t</Item>\r\n\t\t\t\t\t<Item\r\n\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\tstyle={{ display: 'flex', justifyContent: 'left', marginTop: '0.4rem', marginBottom: '1rem' }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tPlease write your name\r\n\t\t\t\t\t</Item>\r\n\t\t\t\t\t<Item xs={12} style={{ display: 'flex', justifyContent: 'left', marginTop: '1rem' }}>\r\n\t\t\t\t\t\t{buttonDisabled ? (\r\n\t\t\t\t\t\t\t<StyledButtonDisabled>Submit</StyledButtonDisabled>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<StyledButton\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tsetQuizState('answerQuestions');\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t\t</StyledButton>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Item>\r\n\t\t\t\t</Container>\r\n\t\t\t</Item>\r\n\t\t</Container>\r\n\t);\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const getQuestions = () => {\r\n\tconst url = 'https://oop-harkka.herokuapp.com/api/questions';\r\n\treturn axios\r\n\t\t.get(url)\r\n\t\t.then((res) => {\r\n\t\t\t//console.log(res.data);\r\n\t\t\treturn res.data;\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.log(error);\r\n\t\t\treturn [];\r\n\t\t});\r\n};\r\n\r\nexport const getTopTen = () => {\r\n\tconst url = 'https://oop-harkka.herokuapp.com/api/scoreboard';\r\n\treturn axios.get(url).then((res) => {\r\n\t\treturn res.data;\r\n\t});\r\n};\r\n\r\nexport const updateTopTen = ({ obj }) => {\r\n\tconst url = 'https://oop-harkka.herokuapp.com/api/addscore';\r\n\tconsole.log(obj);\r\n\treturn axios.post(url, obj).then((res) => {\r\n\t\treturn res.data;\r\n\t});\r\n};\r\n\r\nexport const isCorrectAnswer = ({ data, questionsAnswered, index }) => {\r\n\tif (!!data[questionsAnswered].answers[index] && !!data[questionsAnswered].correct_answer) {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n};\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport styled from 'styled-components';\r\nimport { AnswerQuestions, AskName, ShowScoreboard } from './components';\r\n\r\n// Component to create a MaterialUI grid container\r\nconst Container = styled(({ ...other }) => <Grid container={true} {...other} />)``;\r\n\r\n// Component to create a MaterialUI grid item\r\nconst Item = styled(({ ...other }) => <Grid item={true} {...other} />)``;\r\n\r\n/**\r\n * the app itself: puts all three sections of the app together\r\n */\r\nconst App = () => {\r\n\t// Possible values are askName, answerQuestions, showScoreboard\r\n\tconst [ quizState, setQuizState ] = React.useState('askName');\r\n\tconst [ name, setName ] = React.useState('');\r\n\tconst [ questionsAnswered, setQuestionsAnswered ] = React.useState(0);\r\n\tconst [ score, setScore ] = React.useState(0);\r\n\tconst [ questions, setQuestions ] = React.useState([]);\r\n\tconst [ scores, setScores ] = React.useState([]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<Container\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\theight: '100vh'\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Item\r\n\t\t\t\t\txs={8}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: '#e0dede',\r\n\t\t\t\t\t\theight: '80vh',\r\n\t\t\t\t\t\tminHeight: '200px'\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{/**\r\n           * Render the app itself here: depending on quiz state either name should be asked or questions or scoreboard shown\r\n           */}\r\n\t\t\t\t\t{quizState === 'askName' ? (\r\n\t\t\t\t\t\t<AskName\r\n\t\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\t\tsetName={setName}\r\n\t\t\t\t\t\t\tsetQuizState={setQuizState}\r\n\t\t\t\t\t\t\tbuttonDisabled={questions.length < 10}\r\n\t\t\t\t\t\t\tsetQuestions={setQuestions}\r\n\t\t\t\t\t\t\tsetScores={setScores}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : quizState === 'answerQuestions' ? (\r\n\t\t\t\t\t\t<AnswerQuestions\r\n\t\t\t\t\t\t\tdata={questions}\r\n\t\t\t\t\t\t\tsetQuizState={setQuizState}\r\n\t\t\t\t\t\t\tquestionsAnswered={questionsAnswered}\r\n\t\t\t\t\t\t\tsetQuestionsAnswered={setQuestionsAnswered}\r\n\t\t\t\t\t\t\tscore={score}\r\n\t\t\t\t\t\t\tsetScore={setScore}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : quizState === 'showScoreboard' ? (\r\n\t\t\t\t\t\t<ShowScoreboard\r\n\t\t\t\t\t\t\tscores={scores}\r\n\t\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\t\tsetName={setName}\r\n\t\t\t\t\t\t\tscore={score}\r\n\t\t\t\t\t\t\tsetScore={setScore}\r\n\t\t\t\t\t\t\tsetQuizState={setQuizState}\r\n\t\t\t\t\t\t\tsetData={setQuestions}\r\n\t\t\t\t\t\t\tsetScores={setScores}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\tundefined\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Item>\r\n\t\t\t</Container>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app.js';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}